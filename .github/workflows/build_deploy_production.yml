name: Generate RC2D library static (production)

on:
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: write
  discussions: write

jobs:
  build_deploy_librc2d:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            target: linux
            generator: Unix Makefiles
            arch: x86_64
          - platform: macos-14
            target: macos
            generator: Xcode
            sdk: macosx
            arch: x86_64-arm64
          - platform: macos-14
            target: ios
            generator: Xcode
            sdk: iphonesimulator
            arch: x86_64-arm64
          - platform: macos-14
            target: ios
            generator: Xcode
            sdk: iphoneos
            arch: arm64-arm64e
          - platform: windows-latest
            target: windows
            generator: Visual Studio 17 2022
            arch: x64
          - platform: windows-latest
            target: windows
            generator: Visual Studio 17 2022
            arch: Win32
          - platform: ubuntu-latest
            target: android
          - platform: ubuntu-latest
            target: html5
            generator: Unix Makefiles
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.PAT }}

      - name: Setup Emscripten - HTML5
        if: matrix.target == 'html5'
        uses: mymindstorm/setup-emsdk@v14

      - name: Configure CMake Project for HTML5 and Build with Emscripten - HTML5
        if: matrix.target == 'html5'
        run: |
          mkdir build-html5
          cd build-html5
          emcmake cmake ../ -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          cd ../

      - name: Setup Java JDK LTS - Android
        if: matrix.target == 'android'
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.10'
          distribution: 'oracle'
          cache: 'gradle'

      - name: Generate APK for generate libraries shared .so - Android
        if: matrix.target == 'android'
        run: |
          chmod +x gradlew
          ./gradlew assembleRelease --stacktrace
        working-directory: android-project

      - name: Setup Xcode and Setup Command Line Tools - macOS / iOS
        if: matrix.target == 'ios' || matrix.target == 'macos'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4.0'

      - name: Determine SDK Path and set SDKROOT - macOS / iOS
        if: matrix.target == 'ios' || matrix.target == 'macos'
        run: |
          sdk="${{ matrix.sdk }}"
          SDKROOT=$(xcrun --sdk $sdk --show-sdk-path)
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV
          echo "Using SDK: $sdk"

      - name: Configure project with CMake - iOS (iphoneos/iphonesimulator)
        if: matrix.target == 'ios'
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build-${{ matrix.target }}-${{ matrix.arch }}
          generator: ${{ matrix.generator }}
          options: CMAKE_SYSTEM_NAME=iOS CMAKE_OSX_SYSROOT=${{ matrix.sdk }}

      - name: Run build with CMake - iOS (iphoneos/iphonesimulator)
        if: matrix.target == 'ios'
        run: cmake --build build-${{ matrix.target }}-${{ matrix.arch }} --config Release

      - name: Configure project with CMake - Windows x64
        if: matrix.platform == 'windows-latest' && matrix.arch == 'x64'
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build-${{ matrix.target }}-${{ matrix.arch }}
          generator: ${{ matrix.generator }}
          c-compiler: cl
          cxx-compiler: cl
          options: CMAKE_SYSTEM_NAME=Windows
          args: -A x64

      - name: Run build with CMake - Windows x64
        if: matrix.platform == 'windows-latest' && matrix.arch == 'x64'
        run: cmake --build build-${{ matrix.target }}-${{ matrix.arch }} --config Release

      - name: Configure project with CMake - Windows x86
        if: matrix.platform == 'windows-latest' && matrix.arch == 'Win32'
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build-${{ matrix.target }}-${{ matrix.arch }}
          generator: ${{ matrix.generator }}
          c-compiler: cl
          cxx-compiler: cl
          options: CMAKE_SYSTEM_NAME=Windows
          args: -A Win32

      - name: Run build with CMake - Windows x86
        if: matrix.platform == 'windows-latest' && matrix.arch == 'Win32'
        run: cmake --build build-${{ matrix.target }}-${{ matrix.arch }} --config Release

      - name: Configure project with CMake and Run build - Linux
        if: matrix.target == 'linux'
        uses: threeal/cmake-action@v2.1.0
        with:
          run-build: true
          build-dir: build-${{ matrix.target }}-${{ matrix.arch }}
          generator: ${{ matrix.generator }}
          c-compiler: gcc
          cxx-compiler: g++
          options: CMAKE_SYSTEM_NAME=Linux CMAKE_BUILD_TYPE=Release

      - name: Configure project with CMake - macOS
        if: matrix.target == 'macos'
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build-${{ matrix.target }}-${{ matrix.arch }}
          generator: ${{ matrix.generator }}
          c-compiler: clang
          cxx-compiler: clang++
          options: CMAKE_SYSTEM_NAME=Darwin

      - name: Run build with CMake - macOS
        if: matrix.target == 'macos'
        run: cmake --build build-${{ matrix.target }}-${{ matrix.arch }} --config Release

      - name: Archive librc2d artifacts - Android
        if: matrix.target == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}
          retention-days: 1
          path: |
            android-project/app/build/intermediates/cmake/release/obj/arm64-v8a/librc2d.so
            android-project/app/build/intermediates/cmake/release/obj/armeabi-v7a/librc2d.so
            android-project/app/build/intermediates/cmake/release/obj/x86/librc2d.so
            android-project/app/build/intermediates/cmake/release/obj/x86_64/librc2d.so

      - name: Archive librc2d artifacts - iOS
        if: matrix.target == 'ios'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}-${{ matrix.arch }}-${{ matrix.sdk }}
          retention-days: 1
          path: |
            build-${{ matrix.target }}-${{ matrix.arch }}/Release-${{ matrix.sdk }}/*.a

      - name: Archive librc2d artifacts - macOS
        if: matrix.target == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            build-${{ matrix.target }}-${{ matrix.arch }}/Release/*.a

      - name: Archive librc2d artifacts - Linux
        if: matrix.target == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            build-${{ matrix.target }}-${{ matrix.arch }}/*.a

      - name: Archive librc2d artifacts - Windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            build-${{ matrix.target }}-${{ matrix.arch }}/Release/*.lib

      - name: Archive librc2d artifacts - HTML5
        if: matrix.target == 'html5'
        uses: actions/upload-artifact@v4
        with:
          name: librc2d-${{ matrix.target }}
          retention-days: 1
          path: |
            build-html5/*.a

  deploy_assets_github:
    needs: build_deploy_librc2d
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Organize Artifacts
        run: |
          # Organize Android artifacts
          mkdir -p android/arm64-v8a android/armeabi-v7a android/x86 android/x86_64
          mv librc2d-android/arm64-v8a/*.so android/arm64-v8a/
          mv librc2d-android/armeabi-v7a/*.so android/armeabi-v7a/
          mv librc2d-android/x86/*.so android/x86/
          mv librc2d-android/x86_64/*.so android/x86_64/
          zip -r librc2d-android.zip android/

          # Organize Windows artifacts
          mkdir -p windows/x64 windows/x86
          mv librc2d-windows-x64/*.lib windows/x64/
          mv librc2d-windows-Win32/*.lib windows/x86/
          zip -r librc2d-windows.zip windows/

          # Organize macOS artifacts
          mkdir -p macos/x86_64-arm64
          mv librc2d-macos-x86_64-arm64/*.a macos/x86_64-arm64/
          tar -czvf librc2d-macos.tar.gz macos/

          # Organize iOS artifacts
          mkdir -p ios/arm64-arm64e-iphoneos ios/x86_64-arm64-iphonesimulator
          mv librc2d-ios-arm64-arm64e-iphoneos/*.a ios/arm64-arm64e-iphoneos/
          mv librc2d-ios-x86_64-arm64-iphonesimulator/*.a ios/x86_64-arm64-iphonesimulator/
          tar -czvf librc2d-ios.tar.gz ios/

          # Organize Linux artifacts
          mkdir -p linux/x86_64
          mv librc2d-linux-x86_64/*.a linux/x86_64/
          tar -czvf librc2d-linux.tar.gz linux/

          # Organize HTML5 artifacts
          mkdir html5
          mv librc2d-html5/*.a html5/
          zip -r librc2d-html5.zip html5/

          # Organize Include artifacts
          tar -czvf include.tar.gz include/rc2d

      - name: Deploy libraries assets - Release Github
        uses: softprops/action-gh-release@v2
        with:
          files: |
            librc2d-android.zip
            librc2d-windows.zip
            librc2d-macos.tar.gz
            librc2d-ios.tar.gz
            librc2d-linux.tar.gz
            librc2d-html5.zip
            include.tar.gz

  build_deploy_website:
    needs: deploy_assets_github
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js latest LTS and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci
        working-directory: ./docs

      - name: Build with VitePress
        run: npm run build
        working-directory: ./docs

      - name: Deploy files website static for docs API RC2D
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.O2SWITCH_FTP_HOST }}
          username: ${{ secrets.O2SWITCH_FTP_USERNAME }}
          password: ${{ secrets.O2SWITCH_FTP_PASSWORD }}
          port: ${{ secrets.O2SWITCH_FTP_PORT }}
          protocol: ftp
          local-dir: ./docs/.vitepress/dist/
          server-dir: librc2d.crzcommon2.com/
          exclude: |
            dist